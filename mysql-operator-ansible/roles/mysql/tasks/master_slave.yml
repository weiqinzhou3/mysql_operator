---
# Tasks for master-slave MySQL deployment

- name: Create MySQL Master ConfigMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ ansible_operator_meta.name }}-master-config"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-master
      data:
        my.cnf: "{{ lookup('template', 'master.cnf.j2') }}"
        init-master.sql: "{{ lookup('template', 'init-master.sql.j2') }}"

- name: Create MySQL Slave ConfigMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ ansible_operator_meta.name }}-slave-config"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-slave
      data:
        my.cnf: "{{ lookup('template', 'slave.cnf.j2') }}"
        init-slave.sh: "{{ lookup('template', 'init-slave.sh.j2') }}"

- name: Create MySQL Secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ ansible_operator_meta.name }}-secret"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql
      type: Opaque
      data:
        mysql-root-password: "{{ root_password | default('root') | b64encode }}"
        mysql-database: "{{ database | default('') | b64encode }}"
        mysql-replication-user: "{{ replication.user | default('replicator') | b64encode }}"
        mysql-replication-password: "{{ replication.password | default('replicator') | b64encode }}"

- name: Create MySQL Master StatefulSet
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: "{{ ansible_operator_meta.name }}-master"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-master
      spec:
        serviceName: "{{ ansible_operator_meta.name }}-master"
        replicas: 1
        selector:
          matchLabels:
            app: "{{ ansible_operator_meta.name }}"
            component: mysql-master
        template:
          metadata:
            labels:
              app: "{{ ansible_operator_meta.name }}"
              component: mysql-master
          spec:
            containers:
            - name: mysql
              image: "{{ image | default('registry.cn-hangzhou.aliyuncs.com/library/mysql:8.0') }}"
              ports:
              - containerPort: 3306
                name: mysql
              env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: "{{ ansible_operator_meta.name }}-secret"
                    key: mysql-root-password
              - name: MYSQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: "{{ ansible_operator_meta.name }}-secret"
                    key: mysql-database
              - name: MYSQL_ROOT_HOST
                value: "%"
              volumeMounts:
              - name: mysql-data
                mountPath: /var/lib/mysql
              - name: mysql-config
                mountPath: /etc/mysql/conf.d
              - name: mysql-init
                mountPath: /docker-entrypoint-initdb.d
              resources:
                requests:
                  memory: "{{ resources.requests.memory | default('512Mi') }}"
                  cpu: "{{ resources.requests.cpu | default('500m') }}"
                limits:
                  memory: "{{ resources.limits.memory | default('1Gi') }}"
                  cpu: "{{ resources.limits.cpu | default('1000m') }}"
              livenessProbe:
                exec:
                  command:
                  - mysqladmin
                  - ping
                  - -h
                  - localhost
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e 'SELECT 1'"
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 1
            volumes:
            - name: mysql-config
              configMap:
                name: "{{ ansible_operator_meta.name }}-master-config"
                items:
                - key: my.cnf
                  path: my.cnf
            - name: mysql-init
              configMap:
                name: "{{ ansible_operator_meta.name }}-master-config"
                items:
                - key: init-master.sql
                  path: init-master.sql
        volumeClaimTemplates:
        - metadata:
            name: mysql-data
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: "{{ storage.size | default('20Gi') }}"
            storageClassName: "{{ storage.storage_class if storage.storage_class is defined and storage.storage_class != '' else omit }}"

- name: Create MySQL Master Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ ansible_operator_meta.name }}-master"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-master
      spec:
        type: ClusterIP
        ports:
        - port: 3306
          targetPort: 3306
          protocol: TCP
          name: mysql
        selector:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-master

- name: Create MySQL Slave StatefulSet
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: "{{ ansible_operator_meta.name }}-slave"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-slave
      spec:
        serviceName: "{{ ansible_operator_meta.name }}-slave"
        replicas: {{ replication.slave_replicas | default(1) | int }}
        selector:
          matchLabels:
            app: "{{ ansible_operator_meta.name }}"
            component: mysql-slave
        template:
          metadata:
            labels:
              app: "{{ ansible_operator_meta.name }}"
              component: mysql-slave
          spec:
            containers:
            - name: mysql
              image: "{{ image | default('registry.cn-hangzhou.aliyuncs.com/library/mysql:8.0') }}"
              ports:
              - containerPort: 3306
                name: mysql
              env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: "{{ ansible_operator_meta.name }}-secret"
                    key: mysql-root-password
              - name: MYSQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: "{{ ansible_operator_meta.name }}-secret"
                    key: mysql-database
              - name: MYSQL_ROOT_HOST
                value: "%"
              - name: MYSQL_REPLICATION_USER
                valueFrom:
                  secretKeyRef:
                    name: "{{ ansible_operator_meta.name }}-secret"
                    key: mysql-replication-user
              - name: MYSQL_REPLICATION_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: "{{ ansible_operator_meta.name }}-secret"
                    key: mysql-replication-password
              volumeMounts:
              - name: mysql-data
                mountPath: /var/lib/mysql
              - name: mysql-config
                mountPath: /etc/mysql/conf.d
              - name: mysql-init
                mountPath: /docker-entrypoint-initdb.d
              resources:
                requests:
                  memory: "{{ resources.requests.memory | default('512Mi') }}"
                  cpu: "{{ resources.requests.cpu | default('500m') }}"
                limits:
                  memory: "{{ resources.limits.memory | default('1Gi') }}"
                  cpu: "{{ resources.limits.cpu | default('1000m') }}"
              livenessProbe:
                exec:
                  command:
                  - mysqladmin
                  - ping
                  - -h
                  - localhost
                initialDelaySeconds: 30
                periodSeconds: 10
                timeoutSeconds: 5
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD -e 'SELECT 1'"
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 1
            volumes:
            - name: mysql-config
              configMap:
                name: "{{ ansible_operator_meta.name }}-slave-config"
                items:
                - key: my.cnf
                  path: my.cnf
            - name: mysql-init
              configMap:
                name: "{{ ansible_operator_meta.name }}-slave-config"
                items:
                - key: init-slave.sh
                  path: init-slave.sh
        volumeClaimTemplates:
        - metadata:
            name: mysql-data
          spec:
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: "{{ storage.size | default('20Gi') }}"
            storageClassName: "{{ storage.storage_class if storage.storage_class is defined and storage.storage_class != '' else omit }}"

- name: Create MySQL Slave Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ ansible_operator_meta.name }}-slave"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-slave
      spec:
        type: ClusterIP
        ports:
        - port: 3306
          targetPort: 3306
          protocol: TCP
          name: mysql
        selector:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-slave

- name: Create MySQL LoadBalancer Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql
      spec:
        type: NodePort
        ports:
        - port: 3306
          targetPort: 3306
          protocol: TCP
          name: mysql
          nodePort: 30306
        selector:
          app: "{{ ansible_operator_meta.name }}"
          component: mysql-master